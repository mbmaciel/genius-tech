/**
 * Integrador de estrat√©gias
 * Gerencia e aplica regras de estrat√©gias para os bots
 * Com suporte ao parser XML para seguir fielmente os comandos das estrat√©gias
 */

import { 
  evaluateAdvanceStrategy, 
  evaluateIronOverStrategy, 
  evaluateIronUnderStrategy,
  evaluateMaxProStrategy,
  evaluateDefaultStrategy,
  ContractType,
  DigitStat
} from "@/services/strategyRules";

// Importar parser XML para interpretar as estrat√©gias
import xmlStrategyParser, { 
  StrategyVariables, 
  StrategyAnalysisResult 
} from "@/services/xmlStrategyParser";

// Estado global para cada estrat√©gia
interface StrategyState {
  consecutiveLosses: number;
  lastResult: 'win' | 'loss' | null;
  currentAmount: number;
  prediction?: number;
  entryConditionsMet: boolean;
  strategyXml?: string;
}

// Cache de estado para cada estrat√©gia
const strategyStates: Record<string, StrategyState> = {};

// Cache de XMLs carregados
const xmlCache: Record<string, string> = {};

/**
 * Obt√©m o estado atual da estrat√©gia pelo ID
 * @param strategyId ID normalizado da estrat√©gia
 * @returns Estado atual da estrat√©gia ou undefined se n√£o existir
 */
export function getStrategyState(strategyId: string): StrategyState | undefined {
  const normalizedId = strategyId.toLowerCase();
  return strategyStates[normalizedId];
}

/**
 * Inicializa ou reseta o estado para uma estrat√©gia
 */
export function initializeStrategyState(
  strategyId: string, 
  initialAmount: number = 1.0 // CORRE√á√ÉO: Valor default mais vis√≠vel
): void {
  console.log(`[STRATEGY_HANDLER] Inicializando estado para estrat√©gia: ${strategyId}`);
  
  // CORRE√á√ÉO CR√çTICA: Buscar valor inicial definido pelo usu√°rio antes de inicializar
  let valorInicial = initialAmount; // Valor default
  
  // Verificar se h√° configura√ß√£o do usu√°rio salva
  const strategyLowerCase = strategyId.toLowerCase();
  const strategyConfigString = localStorage.getItem(`strategy_config_${strategyLowerCase}`);
  
  if (strategyConfigString) {
    try {
      const userConfig = JSON.parse(strategyConfigString);
      if (userConfig.valorInicial !== undefined) {
        valorInicial = parseFloat(userConfig.valorInicial);
        console.log(`[STRATEGY_HANDLER] üö® CORRE√á√ÉO CR√çTICA: Inicializando com valor definido pelo usu√°rio: ${valorInicial}`);
      }
    } catch (error) {
      console.error('[STRATEGY_HANDLER] Erro ao carregar configura√ß√£o inicial:', error);
    }
  }
  
  // Definir state padr√£o usando o valor correto
  strategyStates[strategyId] = {
    consecutiveLosses: 0,
    lastResult: null,
    currentAmount: valorInicial, // Usar valor do usu√°rio em vez do valor fixo
    prediction: strategyId.includes('digit') ? Math.floor(Math.random() * 10) : undefined,
    entryConditionsMet: false
  };
  
  console.log(`[STRATEGY_HANDLER] Estado inicializado com valor inicial: ${valorInicial}`);
}

/**
 * Atualiza o estado da estrat√©gia com base no resultado de uma opera√ß√£o
 */
export function updateStrategyResult(
  strategyId: string, 
  result: 'win' | 'loss', 
  profit: number
): void {
  if (!strategyStates[strategyId]) {
    initializeStrategyState(strategyId);
  }
  
  const state = strategyStates[strategyId];
  state.lastResult = result;
  
  // Atualizar contagem de perdas consecutivas
  if (result === 'win') {
    state.consecutiveLosses = 0;
    
    // CORRE√á√ÉO CR√çTICA: N√£o usar valor fixo de 0.35, mas sim o valor inicial configurado pelo usu√°rio
    // Obter configura√ß√£o do usu√°rio para esta estrat√©gia
    const strategyCurrent = strategyId.toLowerCase();
    const strategyConfigString = localStorage.getItem(`strategy_config_${strategyCurrent}`);
    
    if (strategyConfigString) {
      try {
        const userConfig = JSON.parse(strategyConfigString);
        // Usar o valor definido pelo usu√°rio, se dispon√≠vel
        if (userConfig.valorInicial !== undefined) {
          state.currentAmount = parseFloat(userConfig.valorInicial);
          console.log(`[STRATEGY_HANDLER] üö® CORRE√á√ÉO CR√çTICA: Ap√≥s vit√≥ria, usando valor inicial configurado pelo usu√°rio: ${state.currentAmount}`);
        } else {
          // Fallback para valor padr√£o apenas se n√£o houver configura√ß√£o
          state.currentAmount = 1.0; // CORRE√á√ÉO: Valor default mais vis√≠vel
          console.log(`[STRATEGY_HANDLER] Ap√≥s vit√≥ria, usando valor padr√£o: ${state.currentAmount}`);
        }
      } catch (error) {
        console.error('[STRATEGY_HANDLER] Erro ao ler configura√ß√£o ap√≥s vit√≥ria:', error);
        state.currentAmount = 1.0; // CORRE√á√ÉO: Valor default mais vis√≠vel
      }
    } else {
      // N√£o encontrou configura√ß√£o, usar valor padr√£o
      state.currentAmount = 1.0; // CORRE√á√ÉO: Valor default mais vis√≠vel
      console.log(`[STRATEGY_HANDLER] N√£o encontrou configura√ß√£o, usando valor padr√£o ap√≥s vit√≥ria: ${state.currentAmount}`);
    }
  } else {
    state.consecutiveLosses++;
    // Valor de Entrada ser√° calculado de acordo com a estrat√©gia
    console.log(`[STRATEGY_HANDLER] Derrota registrada! Aumentando consecutiveLosses para: ${state.consecutiveLosses}`);
  }
  
  console.log(`[STRATEGY_HANDLER] ${strategyId}: Resultado ${result}, Profit ${profit}, Perdas consecutivas: ${state.consecutiveLosses}`);
}

/**
 * Carrega o XML da estrat√©gia para uso no parser
 */
export async function loadStrategyXml(
  strategyId: string,
  xmlPath: string
): Promise<boolean> {
  try {
    // Se j√° temos o XML em cache, usar o cache
    if (xmlCache[strategyId]) {
      console.log(`[STRATEGY_HANDLER] Usando XML em cache para estrat√©gia: ${strategyId}`);
      
      // Carregar no parser
      const success = xmlStrategyParser.loadXml(xmlCache[strategyId]);
      
      if (success) {
        // Guardar no estado da estrat√©gia
        if (!strategyStates[strategyId]) {
          initializeStrategyState(strategyId);
        }
        strategyStates[strategyId].strategyXml = xmlCache[strategyId];
        return true;
      }
      
      // Se falhou ao usar o cache, tentar buscar de novo
      delete xmlCache[strategyId];
    }
    
    // Buscar o XML do arquivo
    const response = await fetch(xmlPath);
    if (!response.ok) {
      console.error(`[STRATEGY_HANDLER] Erro ao carregar XML da estrat√©gia ${strategyId}: ${response.statusText}`);
      return false;
    }
    
    const xmlContent = await response.text();
    
    // Salvar em cache
    xmlCache[strategyId] = xmlContent;
    
    // Carregar no parser
    const success = xmlStrategyParser.loadXml(xmlContent);
    
    if (success) {
      // Guardar no estado da estrat√©gia
      if (!strategyStates[strategyId]) {
        initializeStrategyState(strategyId);
      }
      strategyStates[strategyId].strategyXml = xmlContent;
      console.log(`[STRATEGY_HANDLER] XML carregado com sucesso para estrat√©gia: ${strategyId}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`[STRATEGY_HANDLER] Erro ao carregar XML da estrat√©gia ${strategyId}:`, error);
    return false;
  }
}

/**
 * Avalia as condi√ß√µes de entrada para uma estrat√©gia usando o parser XML
 * que executa fielmente os comandos da estrat√©gia
 */
export async function evaluateEntryConditions(
  strategyId: string, 
  digitStats: DigitStat[], 
  strategyConfig: any,
  xmlPath?: string
): Promise<{
  shouldEnter: boolean;
  contractType: ContractType;
  prediction?: number;
  entryAmount: number;
  message: string;
}> {
  // Log de depura√ß√£o detalhado ‚¨áÔ∏è
  console.log(`[STRATEGY_HANDLER] üß™ Avaliando condi√ß√µes para estrat√©gia: ${strategyId}`);
  console.log(`[STRATEGY_HANDLER] üß™ Configura√ß√£o recebida:`, strategyConfig);
  console.log(`[STRATEGY_HANDLER] üß™ Quantidade de estat√≠sticas de d√≠gitos recebidas: ${digitStats.length}`);
  
  // Garantir que o estado existe
  if (!strategyStates[strategyId]) {
    console.log(`[STRATEGY_HANDLER] üß™ Inicializando estado da estrat√©gia: ${strategyId}`);
    initializeStrategyState(strategyId);
  }
  
  const state = strategyStates[strategyId];
  const normalizedId = strategyId.toLowerCase();
  
  console.log(`[STRATEGY_HANDLER] üß™ Estado atual da estrat√©gia:`, {
    consecutiveLosses: state.consecutiveLosses,
    lastResult: state.lastResult,
    currentAmount: state.currentAmount,
    xmlDisponivel: !!state.strategyXml
  });
  
  // Verificar se temos o XML carregado ou precisamos carregar
  if (!state.strategyXml && xmlPath) {
    console.log(`[STRATEGY_HANDLER] üß™ Carregando XML da estrat√©gia: ${xmlPath}`);
    await loadStrategyXml(strategyId, xmlPath);
  }
  
  // Converter configura√ß√£o para formato compat√≠vel com o parser
  const userConfig: StrategyVariables = {
    valorInicial: strategyConfig?.valorInicial ? parseFloat(strategyConfig.valorInicial.toString()) : undefined,
    valorAposVencer: strategyConfig?.valorAposVencer ? parseFloat(strategyConfig.valorAposVencer.toString()) : undefined,
    martingale: strategyConfig?.martingale ? parseFloat(strategyConfig.martingale.toString()) : undefined,
    meta: strategyConfig?.metaGanho ? parseFloat(strategyConfig.metaGanho.toString()) : undefined,
    limitePerda: strategyConfig?.limitePerda ? parseFloat(strategyConfig.limitePerda.toString()) : undefined,
    porcentagemParaEntrar: strategyConfig?.porcentagemParaEntrar ? parseFloat(strategyConfig.porcentagemParaEntrar.toString()) : undefined,
    usarMartingaleAposXLoss: strategyConfig?.usarMartingaleAposXLoss ? parseInt(strategyConfig.usarMartingaleAposXLoss.toString()) : undefined,
    parcelasMartingale: strategyConfig?.parcelasMartingale ? parseInt(strategyConfig.parcelasMartingale.toString()) : undefined
  };
  
  // DEBUG - Verificar se a configura√ß√£o do usu√°rio est√° sendo detectada
  if (strategyConfig?.valorInicial) {
    console.log(`[STRATEGY_HANDLER] üîç CR√çTICO: Encontrou valorInicial=${strategyConfig.valorInicial} configurado pelo usu√°rio`);
  } else {
    console.log(`[STRATEGY_HANDLER] üîç CR√çTICO: valorInicial n√£o encontrado na configura√ß√£o do usu√°rio`);
  }
  
  console.log(`[STRATEGY_HANDLER] üß™ Configura√ß√£o convertida para parser XML:`, userConfig);
  
  // Aplicar configura√ß√£o do usu√°rio no parser
  xmlStrategyParser.setUserConfig(userConfig);
  
  // Verificar se podemos usar o parser XML
  const canUseXmlParser = state.strategyXml !== undefined;
  console.log(`[STRATEGY_HANDLER] üß™ Parser XML dispon√≠vel: ${canUseXmlParser}`);
  
  // Configura√ß√µes de entrada padr√£o (caso n√£o use parser XML)
  // CORRE√á√ÉO CR√çTICA: Usar valor inicial configurado pelo usu√°rio
  let entryAmount = state.currentAmount || 1.0; // Valor default mais vis√≠vel
  let shouldEnter = false;
  let contractType: ContractType = 'CALL';
  let prediction: number | undefined = undefined;
  let message = "";
  
  // ----- USO DO PARSER XML - SEGUE FIELMENTE OS COMANDOS DO XML -----
  if (canUseXmlParser) {
    console.log(`[STRATEGY_HANDLER] üß™ Usando parser XML para estrat√©gia: ${strategyId}`);
    
    // Para IRON UNDER: for√ßar debug detalhado
    if (normalizedId.includes('iron') && normalizedId.includes('under')) {
      console.log(`[STRATEGY_HANDLER] üö®üö®üö® IRON UNDER DETECTADO - An√°lise espec√≠fica iniciada üö®üö®üö®`);
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER: Estado atual:`, state);
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER: √öltimas estat√≠sticas:`, digitStats.slice(0, 5));
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER: XML dispon√≠vel:`, !!state.strategyXml);
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER: Configura√ß√£o do usu√°rio:`, strategyConfig);
    }
    
    // Analisar estrat√©gia usando o parser XML
    const result = xmlStrategyParser.analyzeStrategy(
      strategyId,
      digitStats,
      state.consecutiveLosses
    );
    
    // Atualizar estado com base na an√°lise do XML
    shouldEnter = result.shouldEnter;
    contractType = result.contractType as ContractType;
    prediction = result.prediction;
    entryAmount = result.amount;
    message = `[XML] ${result.message}`;
    
    // Log detalhado para rastreabilidade completa do tipo de contrato definido no XML
    console.log(`[STRATEGY_HANDLER] üîç XML EXATO: Tipo de contrato ${contractType} EXATAMENTE como definido no XML da estrat√©gia ${strategyId}`);
    console.log(`[STRATEGY_HANDLER] üîç XML EXATO: shouldEnter=${shouldEnter}, prediction=${prediction}, amount=${entryAmount}`);
    
    // Se for usar martingale com base no resultado anterior
    if (state.lastResult === 'loss') {
      // O parser j√° considera o martingale, o valor j√° est√° ajustado em result.amount
      console.log(`[STRATEGY_HANDLER] [XML] Ajuste de martingale j√° aplicado pelo parser XML: ${entryAmount}`);
    }
  }
  // ----- FALLBACK PARA IMPLEMENTA√á√ÉO ANTERIOR -----
  else {
    console.log(`[STRATEGY_HANDLER] Usando implementa√ß√£o antiga para estrat√©gia: ${strategyId} (XML n√£o dispon√≠vel)`);
    
    // Aplicar regras espec√≠ficas para cada estrat√©gia - IMPLEMENTA√á√ÉO ANTERIOR
    let useMartingale = false;
    
    if (normalizedId.includes('advance')) {
      // Obter porcentagem limite da configura√ß√£o
      // CR√çTICO: Sempre ter um valor para porcentagem, usando 10% como padr√£o se n√£o estiver definido
      let entryPercentage = 10; // Valor padr√£o para estrat√©gia Advance
      
      // Verificar se o usu√°rio definiu um valor espec√≠fico na configura√ß√£o
      if (strategyConfig?.porcentagemParaEntrar !== undefined && strategyConfig.porcentagemParaEntrar !== null) {
        // Converter para n√∫mero e garantir que seja um valor v√°lido
        const configValue = parseFloat(strategyConfig.porcentagemParaEntrar.toString());
        if (!isNaN(configValue)) {
          entryPercentage = configValue;
          console.log(`[STRATEGY_HANDLER] ADVANCE: Usando porcentagem definida pelo usu√°rio: ${entryPercentage}%`);
        } else {
          console.log(`[STRATEGY_HANDLER] ADVANCE: Valor de porcentagem inv√°lido (${strategyConfig.porcentagemParaEntrar}), usando padr√£o: ${entryPercentage}%`);
        }
      } else {
        console.log(`[STRATEGY_HANDLER] ADVANCE: Usando porcentagem padr√£o: ${entryPercentage}%`);
      }
      
      // Log adicional para depura√ß√£o - mostra exatamente o valor que est√° sendo usado
      console.log(`[STRATEGY_HANDLER] ADVANCE DEBUG: Valor final de porcentagem para an√°lise: ${entryPercentage}%`);
      
      // O valor de entryPercentage agora √© garantido ser um n√∫mero v√°lido
      const result = evaluateAdvanceStrategy(digitStats, entryPercentage);
      shouldEnter = result.shouldEnter;
      contractType = result.contractType;
      message = result.message;

      // NOVO: Usar o flag shouldLog para registrar an√°lises intermedi√°rias
      // Isso vai permitir que mesmo as opera√ß√µes n√£o executadas apare√ßam no hist√≥rico
      if (result.shouldLog) {
        // Emitir um evento de an√°lise para o relat√≥rio de opera√ß√µes
        // Isso ser√° gerenciado pelo oauthDirectService para adicionar ao hist√≥rico
        console.log(`[STRATEGY_HANDLER] ADVANCE: Emitindo an√°lise para hist√≥rico: ${message}`);
        console.log(`[STRATEGY_HANDLER] ADVANCE: An√°lise com d√≠gitos - 0: ${result.analysis.digit0}%, 1: ${result.analysis.digit1}%, limite: ${result.analysis.threshold}%`);
        
        // Estrutura de dados adicional ser√° utilizada por oauthDirectService
        // para incluir esta opera√ß√£o no hist√≥rico, mesmo sem execu√ß√£o
        // O tipo expl√≠cito √© uma boa pr√°tica para evitar erros
        const analysisData = {
          shouldLog: true,
          isIntermediate: !shouldEnter, // Se n√£o deve entrar, √© uma an√°lise intermedi√°ria
          message: message,
          analysis: result.analysis
        };
        
        // Esta informa√ß√£o √© passada via "message" e processada em oauthDirectService
        message = JSON.stringify(analysisData);
      }
      
      // Calcular valor de entrada considerando martingale para ADVANCE
      if (state.lastResult === 'loss') {
        const martingaleFactor = strategyConfig?.martingale 
          ? parseFloat(strategyConfig.martingale.toString()) 
          : 1.5;
        
        entryAmount = Math.round((state.currentAmount * (1 + martingaleFactor)) * 100) / 100;
        console.log(`[STRATEGY_HANDLER] ADVANCE: Aplicando martingale, novo valor: ${entryAmount}`);
      }
      
    } else if (normalizedId.includes('iron_over') || normalizedId.includes('ironover')) {
      // Configura√ß√£o para IRON OVER
      prediction = state.prediction || 5;
      
      const martingaleAfterLosses = strategyConfig?.usarMartingaleAposXLoss 
        ? parseInt(strategyConfig.usarMartingaleAposXLoss.toString())
        : 2;
      
      const result = evaluateIronOverStrategy(
        digitStats, 
        prediction, 
        state.consecutiveLosses,
        martingaleAfterLosses
      );
      
      shouldEnter = result.shouldEnter;
      contractType = result.contractType;
      useMartingale = result.useMartingale;
      message = result.message;
      
      // Aplicar martingale apenas se permitido
      if (state.lastResult === 'loss' && useMartingale) {
        const martingaleFactor = strategyConfig?.martingale 
          ? parseFloat(strategyConfig.martingale.toString()) 
          : 0.5;
        
        entryAmount = Math.round((state.currentAmount * (1 + martingaleFactor)) * 100) / 100;
        console.log(`[STRATEGY_HANDLER] IRON_OVER: Aplicando martingale ap√≥s ${state.consecutiveLosses} perdas, novo valor: ${entryAmount}`);
      }
      
    } else if (normalizedId.includes('iron_under') || normalizedId.includes('ironunder')) {
      // Configura√ß√£o para IRON UNDER - ATEN√á√ÉO: A API Deriv requer que o digit esteja entre 1-9
      
      // IMPORTANTE: Verificar se prediction est√° dentro do intervalo v√°lido (1-9)
      // Anteriormente, us√°vamos 4 como padr√£o, mas agora garantimos que esteja entre 1-9
      prediction = state.prediction || 5; // Mudado de 4 para 5 - valor inv√°lido pode causar falha na opera√ß√£o
      
      if (prediction < 1 || prediction > 9) {
        console.error(`[STRATEGY_HANDLER] ‚ùå IRON UNDER: Valor de previs√£o inv√°lido: ${prediction}. A API Deriv aceita apenas 1-9. Ajustando para 5.`);
        prediction = 5; // Valor seguro dentro do intervalo
      }
      
      const martingaleAfterLosses = strategyConfig?.usarMartingaleAposXLoss 
        ? parseInt(strategyConfig.usarMartingaleAposXLoss.toString())
        : 2;
      
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER (Vers√£o corrigida): Iniciando an√°lise detalhada`);
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER (Vers√£o corrigida): Prediction=${prediction}, ConsecutiveLosses=${state.consecutiveLosses}, martingaleAfterLosses=${martingaleAfterLosses}`);
      
      const result = evaluateIronUnderStrategy(
        digitStats, 
        prediction, 
        state.consecutiveLosses,
        martingaleAfterLosses
      );
      
      console.log(`[STRATEGY_HANDLER] üö® IRON UNDER (Vers√£o corrigida): Resultado da an√°lise:`, result);
      
      shouldEnter = result.shouldEnter;
      contractType = result.contractType;
      useMartingale = result.useMartingale;
      message = result.message;
      
      // Aplicar martingale apenas se permitido
      if (state.lastResult === 'loss' && useMartingale) {
        const martingaleFactor = strategyConfig?.martingale 
          ? parseFloat(strategyConfig.martingale.toString()) 
          : 0.5;
        
        entryAmount = Math.round((state.currentAmount * (1 + martingaleFactor)) * 100) / 100;
        console.log(`[STRATEGY_HANDLER] IRON_UNDER: Aplicando martingale ap√≥s ${state.consecutiveLosses} perdas, novo valor: ${entryAmount}`);
      }
      
    } else if (normalizedId.includes('maxpro')) {
      // Configura√ß√£o para MAXPRO
      // CORRE√á√ÉO CR√çTICA (29/04/2025): Garantir que estamos passando os d√≠gitos recentes e o loss virtual
      // para que a estrat√©gia MAXPRO possa avaliar corretamente as condi√ß√µes de entrada
      // Verificar configura√ß√µes de lossVirtual nos par√¢metros da fun√ß√£o ou usar valor padr√£o
      const lossVirtual = strategyConfig?.lossVirtual 
        ? parseInt(strategyConfig.lossVirtual.toString())
        : 1;
      // Usar os d√≠gitos recentes passados como par√¢metro para a fun√ß√£o
      const recentDigits = Array.isArray(digitStats) ? digitStats.map(d => d.digit) : [];
      
      console.log(`[STRATEGY_HANDLER] üîç MAXPRO: Usando an√°lise de loss virtual = ${lossVirtual}`);
      console.log(`[STRATEGY_HANDLER] üîç MAXPRO: Analisando d√≠gitos recentes = ${recentDigits.slice(0, 10).join(', ')}`);
      
      const result = evaluateMaxProStrategy(digitStats, recentDigits, lossVirtual);
      shouldEnter = result.shouldEnter;
      console.log(`[STRATEGY_HANDLER] üîç MAXPRO: Resultado da an√°lise = ${shouldEnter ? 'ENTRAR ‚úÖ' : 'N√ÉO ENTRAR ‚ùå'}, Motivo: ${result.message}`);
      contractType = result.contractType;
      prediction = result.prediction;
      message = result.message;
      
      // Aplicar martingale para MAXPRO
      if (state.lastResult === 'loss') {
        const martingaleFactor = strategyConfig?.martingale 
          ? parseFloat(strategyConfig.martingale.toString()) 
          : 1.5;
        
        entryAmount = Math.round((state.currentAmount * (1 + martingaleFactor)) * 100) / 100;
        console.log(`[STRATEGY_HANDLER] MAXPRO: Aplicando martingale, novo valor: ${entryAmount}`);
      }
      
    } else {
      // Estrat√©gia padr√£o
      const defaultContractType = contractType as ContractType;
      const result = evaluateDefaultStrategy(digitStats, defaultContractType);
      shouldEnter = result.shouldEnter;
      contractType = result.contractType;
      message = result.message;
      
      // Aplicar martingale padr√£o
      if (state.lastResult === 'loss') {
        const martingaleFactor = strategyConfig?.martingale 
          ? parseFloat(strategyConfig.martingale.toString()) 
          : 1.5;
        
        entryAmount = Math.round((state.currentAmount * (1 + martingaleFactor)) * 100) / 100;
        console.log(`[STRATEGY_HANDLER] ${strategyId}: Aplicando martingale padr√£o, novo valor: ${entryAmount}`);
      }
    }
  }
  
  // Atualizar estado da estrat√©gia
  state.entryConditionsMet = shouldEnter;
  state.currentAmount = entryAmount;
  
  return {
    shouldEnter,
    contractType,
    prediction,
    entryAmount,
    message
  };
}



/**
 * Reseta todas as estrat√©gias
 */
export function resetAllStrategies(): void {
  Object.keys(strategyStates).forEach(id => {
    initializeStrategyState(id);
  });
  console.log("[STRATEGY_HANDLER] Todas as estrat√©gias foram redefinidas");
}