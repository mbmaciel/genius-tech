/**
 * Regras de estrat√©gias para os bots de trading
 * Implementa√ß√£o das condi√ß√µes espec√≠ficas de cada bot
 */

// Tipos de estat√≠sticas de d√≠gitos
export interface DigitStat {
  digit: number;
  count: number;
  percentage: number;
}

export type ContractType = 'CALL' | 'PUT' | 'DIGITOVER' | 'DIGITUNDER' | 'DIGITDIFF' | 'DIGITEVEN' | 'DIGITODD';

/**
 * Avalia a estrat√©gia ADVANCE
 * Regra: Comprar APENAS quando os d√≠gitos 0 E 1 tiverem frequ√™ncia MENOR OU IGUAL √† porcentagem definida pelo usu√°rio
 * A an√°lise DEVE utilizar EXATAMENTE os √∫ltimos 25 ticks para calcular os percentuais
 */
// Defini√ß√£o expandida do tipo de retorno para Advance
interface AdvanceStrategyAnalysis {
  digit0: number;
  digit1: number;
  threshold: number;
  barrier?: number;
  predictionValue?: number;
}

export function evaluateAdvanceStrategy(
  digitStats: DigitStat[],
  entryPercentage: number | undefined
): { 
  shouldEnter: boolean; 
  contractType: ContractType; 
  message: string;
  barrier: string; // Tornando obrigat√≥rio
  prediction: number; // Tornando obrigat√≥rio
  analysis: AdvanceStrategyAnalysis; 
  shouldLog: boolean; 
} {
  // Garantir que sempre temos um valor para porcentagem
  // Se valor n√£o estiver definido, usar 10% como padr√£o
  const percentageToUse = entryPercentage !== undefined ? entryPercentage : 10;
  
  // Log adicional para debug detalhado
  console.log(`[STRATEGY_RULES] ADVANCE: Analisando com porcentagem definida pelo usu√°rio: ${percentageToUse}%`);
  console.log(`[STRATEGY_RULES] ADVANCE: Total de estat√≠sticas recebidas: ${digitStats.length} d√≠gitos`);
  
  // Reescrita da valida√ß√£o para simplicidade e clareza
  if (typeof percentageToUse !== 'number' || isNaN(percentageToUse)) {
    return { 
      shouldEnter: false, 
      contractType: 'CALL', // A estrat√©gia Advance usa CALL para melhor compatibilidade
      message: `Configura√ß√£o de porcentagem inv√°lida: ${percentageToUse}. Usando valor padr√£o 10%.`,
      barrier: "1", // FOR√áAR aqui tamb√©m
      prediction: 1, // FOR√áAR aqui tamb√©m
      analysis: { digit0: 0, digit1: 0, threshold: 10 },
      shouldLog: false // N√ÉO registramos esta opera√ß√£o intermedi√°ria no hist√≥rico (CORRE√á√ÉO)
    };
  }
  
  // CR√çTICO: Verificar se temos dados suficientes (exatamente 25 ticks s√£o necess√°rios)
  // Contamos o total de ticks representados nas estat√≠sticas
  const totalTicksRepresented = digitStats.reduce((sum, stat) => sum + stat.count, 0);
  
  // Log para depura√ß√£o
  console.log(`[STRATEGY_RULES] ADVANCE: Total de ticks nas estat√≠sticas: ${totalTicksRepresented}`);
  
  // Verificamos se temos exatamente 25 ticks para an√°lise
  // Se n√£o tiver pelo menos 25, n√£o podemos prosseguir com an√°lise precisa
  if (totalTicksRepresented < 25) {
    return { 
      shouldEnter: false, 
      contractType: 'CALL', // Tipo correto para estrat√©gia Advance
      message: `ADVANCE: Dados insuficientes para an√°lise. Necess√°rios exatamente 25 ticks, temos ${totalTicksRepresented}.`,
      barrier: "1", // FOR√áANDO BARREIRA 1
      prediction: 1, // FOR√áANDO PREVIS√ÉO 1
      analysis: { 
        digit0: 0, 
        digit1: 0, 
        threshold: percentageToUse,
        barrier: 1, // Valor padr√£o para compatibilidade
        predictionValue: 1 // Valor padr√£o para compatibilidade 
      },
      shouldLog: true // Registramos esta an√°lise no hist√≥rico
    };
  }
  
  // Extrair estat√≠sticas para os d√≠gitos 0 e 1 dos √∫ltimos 25 ticks
  const digit0 = digitStats.find(stat => stat.digit === 0);
  const digit1 = digitStats.find(stat => stat.digit === 1);
  
  // Certifique-se de sempre ter valores, mesmo que sejam zeros
  const digit0Percentage = digit0 ? Math.round(digit0.percentage) : 0;
  const digit1Percentage = digit1 ? Math.round(digit1.percentage) : 0;
  
  // Log para depura√ß√£o
  console.log(`[STRATEGY_RULES] ADVANCE: Baseado nos √∫ltimos 25 ticks:`);
  console.log(`[STRATEGY_RULES] ADVANCE:   - D√≠gito 0: ${digit0Percentage}%`);
  console.log(`[STRATEGY_RULES] ADVANCE:   - D√≠gito 1: ${digit1Percentage}%`);
  console.log(`[STRATEGY_RULES] ADVANCE:   - Limite definido pelo usu√°rio: ${percentageToUse}%`);
  
  // Se n√£o encontrou estat√≠sticas para esses d√≠gitos espec√≠ficos, usar zeros
  // mas ainda registramos no hist√≥rico para transpar√™ncia
  if (!digit0 || !digit1) {
    return { 
      shouldEnter: false, 
      contractType: 'CALL', 
      message: 'ADVANCE: Calculando estat√≠sticas para d√≠gitos 0 e 1...',
      barrier: "1", // FOR√áANDO BARREIRA 1
      prediction: 1, // FOR√áANDO PREVIS√ÉO 1
      analysis: { 
        digit0: digit0Percentage, 
        digit1: digit1Percentage, 
        threshold: percentageToUse,
        barrier: 1, // Valor padr√£o para compatibilidade
        predictionValue: 1 // Valor padr√£o para compatibilidade 
      },
      shouldLog: true // Registramos esta an√°lise no hist√≥rico
    };
  }
  
  // CR√çTICO: Adicionar log espec√≠fico para debugar os valores usados na compara√ß√£o
  console.log(`[STRATEGY_RULES] ADVANCE DEBUG: Comparando digit0=${digit0Percentage}% e digit1=${digit1Percentage}% com limite=${percentageToUse}%`);
  
  // CORRE√á√ÉO CR√çTICA: Verificar explicitamente cada condi√ß√£o separadamente para facilitar debugging
  const digit0Ok = digit0Percentage <= percentageToUse;
  const digit1Ok = digit1Percentage <= percentageToUse;
  
  // IMPORTANTE: A condi√ß√£o s√≥ √© satisfeita quando AMBOS os d√≠gitos est√£o com percentual MENOR OU IGUAL ao definido
  const shouldEnter = digit0Ok && digit1Ok;
  
  console.log(`[STRATEGY_RULES] üîé VERIFICA√á√ÉO DETALHADA ADVANCE:`);
  console.log(`[STRATEGY_RULES] üîé D√≠gito 0 (${digit0Percentage}%) <= ${percentageToUse}%? ${digit0Ok ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
  console.log(`[STRATEGY_RULES] üîé D√≠gito 1 (${digit1Percentage}%) <= ${percentageToUse}%? ${digit1Ok ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
  console.log(`[STRATEGY_RULES] üîé AMBOS os d√≠gitos est√£o abaixo do limite? ${shouldEnter ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
  
  // Notificar usu√°rio no console para diagn√≥stico com mais detalhes
  if (shouldEnter) {
    console.log(`[STRATEGY_RULES] üöÄüöÄüöÄ ATEN√á√ÉO: CONDI√á√ÉO DE ENTRADA IDENTIFICADA! AMBOS os d√≠gitos 0 (${digit0Percentage}%) e 1 (${digit1Percentage}%) <= ${percentageToUse}%`);
  } else {
    console.log(`[STRATEGY_RULES] ‚ùå CONDI√á√ÉO N√ÉO ATENDIDA! Um ou ambos os d√≠gitos est√£o acima do limite de ${percentageToUse}%`);
    if (!digit0Ok) {
      console.log(`[STRATEGY_RULES] ‚ùå D√≠gito 0 (${digit0Percentage}%) > ${percentageToUse}%`);
    }
    if (!digit1Ok) {
      console.log(`[STRATEGY_RULES] ‚ùå D√≠gito 1 (${digit1Percentage}%) > ${percentageToUse}%`);
    }
  }
  
  // Determinar mensagem de feedback expl√≠cita incluindo o valor definido pelo usu√°rio
  let message = shouldEnter 
    ? `ADVANCE XML: ‚úÖ Condi√ß√£o satisfeita! Executando DIGITOVER conforme XML. D√≠gitos 0 (${digit0Percentage}%) e 1 (${digit1Percentage}%) ambos <= ${percentageToUse}%`
    : `ADVANCE XML: ‚ùå Condi√ß√£o n√£o atendida. D√≠gito 0 (${digit0Percentage}%) ou 1 (${digit1Percentage}%) > ${percentageToUse}%`;
    
  // CORRE√á√ÉO CR√çTICA: For√ßar valores para a estrat√©gia Advance
  // Especialmente a barreira = 1 para DIGITOVER e dura√ß√£o = 1 tick, conforme imagem do contrato
  console.log(`[STRATEGY_RULES] üö® CORRE√á√ÉO CR√çTICA ADVANCE: For√ßando DIGITOVER com barreira 1 e duration 1 tick!`);
  
  // Atualizar para mostrar a barreira correta
  message = message.replace('DIGITOVER', 'DIGITOVER 1');
  
  // SALVAR NO LOCALSTORAGE para rastreabilidade e diagn√≥stico
  try {
    localStorage.setItem('ADVANCE_BARRIER_FORCED', '1');
    localStorage.setItem('ADVANCE_DURATION_FORCED', '1');
    localStorage.setItem('ADVANCE_PREDICTION_FORCED', '1');
    localStorage.setItem('ADVANCE_EXECUTION_TIME', new Date().toISOString());
  } catch (e) {}
  
  return { 
    shouldEnter, 
    contractType: 'DIGITOVER', // CORRE√á√ÉO: O contrato √© DIGITOVER conforme confirmado pelo usu√°rio
    message,
    barrier: "1", // CRITICO - FOR√áANDO BARREIRA 1
    prediction: 1, // CR√çTICO - FOR√áANDO PREVIS√ÉO 1 
    analysis: { 
      digit0: digit0Percentage, 
      digit1: digit1Percentage, 
      threshold: percentageToUse,
      barrier: 1, // EXPLICITAMENTE DOCUMENTADO
      predictionValue: 1 // EXPLICITAMENTE DOCUMENTADO
    },
    shouldLog: true // Sempre registramos estas an√°lises no hist√≥rico para transpar√™ncia completa
  };
}

/**
 * Avalia a estrat√©gia IRON OVER
 * Regra: Usa contratos DIGITOVER e respeita o n√∫mero de perdas para aplicar martingale
 * 
 * IMPLEMENTA√á√ÉO EXATA DO XML: <purchase>DIGITOVER</purchase>
 */
export function evaluateIronOverStrategy(
  digitStats: DigitStat[],
  prediction: number = 5,
  consecutiveLosses: number = 0,
  martingaleAfterLosses: number = 2
): { shouldEnter: boolean; contractType: ContractType; useMartingale: boolean; message: string } {
  // Logs para diagn√≥stico
  console.log(`[STRATEGY_RULES] üöÄ IRON OVER XML: Executando compra DIGITOVER conforme definido no XML`);
  console.log(`[STRATEGY_RULES] üöÄ IRON OVER XML: Previs√£o=${prediction}, Perdas consecutivas=${consecutiveLosses}`);
  
  // IRON OVER SEMPRE faz DIGITOVER, conforme XML (sem condi√ß√£o)
  const shouldEnter = true;
  const contractType: ContractType = 'DIGITOVER';
  
  // Determinar se deve aplicar martingale baseado no n√∫mero de perdas consecutivas
  const useMartingale = consecutiveLosses >= martingaleAfterLosses;
  
  const message = useMartingale
    ? `IRON OVER XML: Usando martingale ap√≥s ${consecutiveLosses} perdas (limite: ${martingaleAfterLosses}). Previs√£o: DIGITOVER ${prediction}`
    : `IRON OVER XML: Opera√ß√£o normal sem martingale. Previs√£o: DIGITOVER ${prediction}`;
  
  // Logs para diagn√≥stico
  console.log(`[STRATEGY_RULES] üöÄ IRON OVER XML: shouldEnter=${shouldEnter}, Tipo=${contractType}, useMartingale=${useMartingale}`);
  
  return {
    shouldEnter,
    contractType,
    useMartingale,
    message
  };
}

/**
 * Avalia a estrat√©gia IRON UNDER
 * Similar √† IRON OVER, mas com l√≥gica invertida e usa DIGITUNDER
 * IMPORTANTE: A API Deriv exige que o valor 'digit' esteja no range 1-9
 * 
 * IMPLEMENTA√á√ÉO EXATA DO XML: <purchase>DIGITUNDER</purchase>
 */
export function evaluateIronUnderStrategy(
  digitStats: DigitStat[],
  prediction: number = 5, // ATUALIZADO: Agora usamos 5 como padr√£o - API Deriv requer valores entre 1-9
  consecutiveLosses: number = 0,
  martingaleAfterLosses: number = 2
): { shouldEnter: boolean; contractType: ContractType; useMartingale: boolean; message: string } {
  // Valida√ß√£o de seguran√ßa para garantir que prediction esteja no intervalo permitido
  if (prediction < 1 || prediction > 9) {
    console.warn(`[STRATEGY_RULES] IRON UNDER XML: Previs√£o ${prediction} fora do intervalo permitido (1-9). Ajustando para 5.`);
    prediction = 5; // Valor seguro dentro do intervalo permitido
  }
  
  // Logs para diagn√≥stico
  console.log(`[STRATEGY_RULES] üöÄ IRON UNDER XML: Executando compra DIGITUNDER conforme definido no XML`);
  console.log(`[STRATEGY_RULES] üöÄ IRON UNDER XML: Previs√£o=${prediction}, Perdas consecutivas=${consecutiveLosses}`);
  
  // IRON UNDER SEMPRE faz DIGITUNDER, conforme XML (sem condi√ß√£o)
  const shouldEnter = true;
  const contractType: ContractType = 'DIGITUNDER';
  
  // Determinar se deve aplicar martingale baseado no n√∫mero de perdas consecutivas
  const useMartingale = consecutiveLosses >= martingaleAfterLosses;
  
  const message = useMartingale
    ? `IRON UNDER XML: Usando martingale ap√≥s ${consecutiveLosses} perdas (limite: ${martingaleAfterLosses}). Previs√£o: DIGITUNDER ${prediction}`
    : `IRON UNDER XML: Opera√ß√£o normal sem martingale. Previs√£o: DIGITUNDER ${prediction}`;
  
  // Logs para diagn√≥stico
  console.log(`[STRATEGY_RULES] üöÄ IRON UNDER XML: shouldEnter=${shouldEnter}, Tipo=${contractType}, useMartingale=${useMartingale}`);
  
  return {
    shouldEnter,
    contractType,
    useMartingale,
    message
  };
}

/**
 * Avalia a estrat√©gia ProfitPro
 * Implementa a l√≥gica de Loss Virtual para d√≠gitos 0-6
 * 
 * O par√¢metro lossVirtual controla quantos d√≠gitos consecutivos (0-6) devem aparecer antes de entrar
 */
export function evaluateProfitProStrategy(
  digitStats: DigitStat[],
  recentDigits: number[],
  lossVirtual: number = 1
): { shouldEnter: boolean; contractType: ContractType; prediction: number; message: string } {
  console.log(`[STRATEGY_RULES] ProfitPro: Analisando com Loss Virtual = ${lossVirtual}`);
  console.log(`[STRATEGY_RULES] ProfitPro: D√≠gitos recentes:`, recentDigits.slice(0, 10).join(', '));
  
  // Verificar se temos d√≠gitos suficientes para an√°lise
  if (recentDigits.length < lossVirtual) {
    console.log(`[STRATEGY_RULES] ProfitPro: D√≠gitos insuficientes (${recentDigits.length}) para an√°lise de Loss Virtual (${lossVirtual})`);
    return {
      shouldEnter: false,
      contractType: 'DIGITOVER',
      prediction: 7,
      message: `ProfitPro: D√≠gitos insuficientes (${recentDigits.length}) para an√°lise de Loss Virtual (${lossVirtual})`
    };
  }
  
  // Verificar os √∫ltimos 'lossVirtual' d√≠gitos para determinar se devemos operar
  // Precisamos verificar se h√° 'lossVirtual' ocorr√™ncias consecutivas de d√≠gitos 0-6
  const relevantDigits = recentDigits.slice(0, lossVirtual);
  const isTargetDigit = (digit: number) => digit >= 0 && digit <= 6;
  
  // Verificar se todos os d√≠gitos relevantes s√£o entre 0-6
  const allTargetDigits = relevantDigits.every(isTargetDigit);
  
  console.log(`[STRATEGY_RULES] ProfitPro: Verificando ${lossVirtual} d√≠gitos consecutivos:`, relevantDigits.join(', '));
  console.log(`[STRATEGY_RULES] ProfitPro: Todos os d√≠gitos s√£o 0-6? ${allTargetDigits ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
  
  // Se todos os d√≠gitos relevantes forem 0-6, devemos entrar com DIGITOVER 7
  const shouldEnter = allTargetDigits;
  const contractType: ContractType = 'DIGITOVER';
  const prediction = 7; // Entrar com DIGITOVER 7 quando d√≠gitos 0-6 aparecem lossVirtual vezes consecutivas
  
  let message = shouldEnter
    ? `ProfitPro: Condi√ß√£o atendida! ${lossVirtual} d√≠gitos consecutivos entre 0-6. Executando DIGITOVER ${prediction}`
    : `ProfitPro: Aguardando ${lossVirtual} d√≠gitos consecutivos entre 0-6. Sequ√™ncia atual: ${relevantDigits.join(', ')}`;
  
  return {
    shouldEnter,
    contractType,
    prediction,
    message
  };
}

/**
 * Avalia a estrat√©gia MAXPRO
 * Implementa a l√≥gica de Loss Virtual para d√≠gitos 0-3
 * 
 * O par√¢metro lossVirtual controla quantos d√≠gitos consecutivos (0-3) devem aparecer antes de entrar
 */
export function evaluateMaxProStrategy(
  digitStats: DigitStat[],
  recentDigits: number[],
  lossVirtual: number = 1
): { shouldEnter: boolean; contractType: ContractType; prediction: number; message: string } {
  console.log(`[STRATEGY_RULES] MaxPro: Analisando com Loss Virtual = ${lossVirtual}`);
  console.log(`[STRATEGY_RULES] MaxPro: D√≠gitos recentes:`, recentDigits.slice(0, 10).join(', '));
  
  // Verificar se temos d√≠gitos suficientes para an√°lise
  if (recentDigits.length < lossVirtual) {
    console.log(`[STRATEGY_RULES] MaxPro: D√≠gitos insuficientes (${recentDigits.length}) para an√°lise de Loss Virtual (${lossVirtual})`);
    return {
      shouldEnter: false,
      contractType: 'DIGITOVER',
      prediction: 4,
      message: `MaxPro: D√≠gitos insuficientes (${recentDigits.length}) para an√°lise de Loss Virtual (${lossVirtual})`
    };
  }
  
  // Verificar os √∫ltimos 'lossVirtual' d√≠gitos para determinar se devemos operar
  // Precisamos verificar se h√° 'lossVirtual' ocorr√™ncias consecutivas de d√≠gitos 0-3
  const relevantDigits = recentDigits.slice(0, lossVirtual);
  const isTargetDigit = (digit: number) => digit >= 0 && digit <= 3;
  
  // Verificar se todos os d√≠gitos relevantes s√£o entre 0-3
  const allTargetDigits = relevantDigits.every(isTargetDigit);
  
  console.log(`[STRATEGY_RULES] MaxPro: Verificando ${lossVirtual} d√≠gitos consecutivos:`, relevantDigits.join(', '));
  console.log(`[STRATEGY_RULES] MaxPro: Todos os d√≠gitos s√£o 0-3? ${allTargetDigits ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
  
  // Se todos os d√≠gitos relevantes forem 0-3, devemos entrar com DIGITOVER 4
  const shouldEnter = allTargetDigits;
  const contractType: ContractType = 'DIGITOVER';
  const prediction = 4; // Entrar com DIGITOVER 4 quando d√≠gitos 0-3 aparecem lossVirtual vezes consecutivas
  
  let message = shouldEnter
    ? `MaxPro: Condi√ß√£o atendida! ${lossVirtual} d√≠gitos consecutivos entre 0-3. Executando DIGITOVER ${prediction}`
    : `MaxPro: Aguardando ${lossVirtual} d√≠gitos consecutivos entre 0-3. Sequ√™ncia atual: ${relevantDigits.join(', ')}`;
  
  return {
    shouldEnter,
    contractType,
    prediction,
    message
  };
}



/**
 * Avalia a estrat√©gia Bot Low
 * Implementa a l√≥gica para d√≠gitos 0-2
 * O par√¢metro lossVirtual √© fixo em 1 para esta estrat√©gia
 */
export function evaluateBotLowStrategy(
  digitStats: DigitStat[],
  recentDigits: number[]
): { shouldEnter: boolean; contractType: ContractType; prediction: number; message: string } {
  const lossVirtual = 1; // Bot Low tem sempre Loss Virtual = 1 (fixo)
  console.log(`[STRATEGY_RULES] Bot Low: Analisando com Loss Virtual fixo = ${lossVirtual}`);
  console.log(`[STRATEGY_RULES] Bot Low: D√≠gitos recentes:`, recentDigits.slice(0, 10).join(', '));
  
  // Verificar se temos d√≠gitos suficientes para an√°lise
  if (recentDigits.length < 1) {
    console.log(`[STRATEGY_RULES] Bot Low: D√≠gitos insuficientes (${recentDigits.length}) para an√°lise`);
    return {
      shouldEnter: false,
      contractType: 'DIGITOVER',
      prediction: 3,
      message: `Bot Low: D√≠gitos insuficientes (${recentDigits.length}) para an√°lise`
    };
  }
  
  // Verificar o √∫ltimo d√≠gito para determinar se devemos operar
  // Precisamos verificar se o √∫ltimo d√≠gito √© entre 0-2
  const lastDigit = recentDigits[0];
  const isTargetDigit = lastDigit >= 0 && lastDigit <= 2;
  
  console.log(`[STRATEGY_RULES] Bot Low: Verificando √∫ltimo d√≠gito: ${lastDigit}`);
  console.log(`[STRATEGY_RULES] Bot Low: D√≠gito √© 0-2? ${isTargetDigit ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
  
  // Se o √∫ltimo d√≠gito for 0-2, devemos entrar com DIGITOVER 3
  const shouldEnter = isTargetDigit;
  const contractType: ContractType = 'DIGITOVER';
  const prediction = 3; // Entrar com DIGITOVER 3 quando o √∫ltimo d√≠gito √© 0-2
  
  let message = shouldEnter
    ? `Bot Low: Condi√ß√£o atendida! √öltimo d√≠gito ${lastDigit} est√° entre 0-2. Executando DIGITOVER ${prediction}`
    : `Bot Low: Aguardando d√≠gito entre 0-2. √öltimo d√≠gito: ${lastDigit}`;
  
  return {
    shouldEnter,
    contractType,
    prediction,
    message
  };
}

/**
 * Avalia a estrat√©gia padr√£o (fallback)
 * Usada quando n√£o h√° regras espec√≠ficas para a estrat√©gia selecionada
 */
export function evaluateDefaultStrategy(
  digitStats: DigitStat[],
  contractType: ContractType = 'CALL'
): { shouldEnter: boolean; contractType: ContractType; message: string } {
  // Estrat√©gia padr√£o sempre entra, usando o tipo de contrato especificado
  return {
    shouldEnter: true,
    contractType,
    message: `Estrat√©gia padr√£o: Entrada com ${contractType}`
  };
}