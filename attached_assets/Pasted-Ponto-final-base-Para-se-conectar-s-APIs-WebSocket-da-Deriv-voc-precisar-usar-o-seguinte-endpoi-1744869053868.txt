Ponto final base
Para se conectar √†s APIs WebSocket da Deriv, voc√™ precisar√° usar o seguinte endpoint base:

wss://ws.derivws.com/websockets/v3?app_id={app_id}

Certifique-se de substituir pelo ID exclusivo do aplicativo que voc√™ registrou.{app_id}

Limites de taxa
Os limites de taxa para solicita√ß√µes de API podem mudar ao longo do tempo. Para descobrir o limite atual, voc√™ pode fazer uma chamada e verificar o campo. Isso garante que voc√™ sempre tenha as informa√ß√µes mais atualizadas.website_status/server statusapi_call_limits

Validade da sess√£o
Sua sess√£o WebSocket expirar√° ap√≥s 2 minutos de inatividade. Se n√£o houver solicita√ß√µes ou respostas durante esse per√≠odo, o servidor encerrar√° a conex√£o. Para evitar isso, envie solicita√ß√µes periodicamente para manter a conex√£o ativa.

Por exemplo, voc√™ pode enviar uma solicita√ß√£o de ping ou outra chamada simples como time em intervalos regulares.

Criar WebSocket
Para come√ßar a usar WebSockets, voc√™ precisa primeiro criar uma nova inst√¢ncia de WebSocket. Veja como fazer isso:

Criar uma inst√¢ncia WebSocket
Use o construtor WebSocket para criar uma nova inst√¢ncia:

üöß
Aviso:

Substitua pelo ID exclusivo do aplicativo que voc√™ registrou. Voc√™ pode encontr√°-lo na aba "Gerenciar Aplicativos" .{app_id}

JavaScript

let socket = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id={app_id}');
üìò
Importante: Conex√µes seguras vs. n√£o seguras

wss:// estabelece uma conex√£o WebSocket segura (criptografada e protegida).
ws:// estabelece uma conex√£o WebSocket n√£o segura (n√£o criptografada).

Eventos
A comunica√ß√£o WebSocket gira em torno de quatro eventos principais. Compreender esses eventos principais ajudar√° voc√™ a gerenciar a conex√£o de forma eficaz.

Ao abrir
O que faz: Este evento √© acionado quando a conex√£o com o servidor √© estabelecida com sucesso.
O que saber: Assim que este evento √© disparado, a propriedade do WebSocket passa a indicar que a conex√£o est√° aberta e pronta para comunica√ß√£o. Ela pode ter v√°rios valores. Para mais informa√ß√µes, consulte a documenta√ß√£o do readyState do MDN WebSocket .readyState1readyState

JavaScript

socket.onopen = function (e) {
  console.log('[open] Connection established');
  console.log('Sending to server');
  const sendMessage = JSON.stringify({ ping: 1 });
  socket.send(sendMessage);
};
Na mensagem
O que faz: Dispara sempre que uma mensagem √© recebida do servidor.
Uso: Use este evento para capturar e manipular dados recebidos do servidor.

JavaScript

socket.onmessage = function (event) {
  console.log(`[message] Data received from server: ${event.data}`);
};
Ao fechar
O que faz: Aciona quando a conex√£o WebSocket √© encerrada pelo cliente, servidor ou devido a uma falha de conex√£o.
Detalhes adicionais: Se voc√™ encerrar a conex√£o usando este m√©todo, poder√° fornecer um c√≥digo e uma mensagem explicando o motivo. O servidor normalmente retornar√° o mesmo c√≥digo e a mesma mensagem.Close()

JavaScript

socket.onclose = function (event) {
  if (event.wasClean) {
    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
  } else {
    // e.g. server process killed or network down
    // event.code is usually 1006 in this case
    console.log('[close] Connection died');
  }
};
Em caso de erro
O que ele faz: Dispara quando ocorre um erro na conex√£o WebSocket.
Tratamento de erros: Use este evento para detectar e tratar erros, garantindo que seu aplicativo possa responder ou tentar novamente conforme necess√°rio.

JavaScript

socket.onerror = function (error) {
  console.log(`[error] ${error.message}`);
};
M√©todos
Aqui est√° um r√°pido resumo dos m√©todos essenciais que voc√™ usar√° com WebSockets:

Abrir
Como funciona: Chamada para iniciar o processo de conex√£o com o servidor. Chamada sem bloqueio: Ap√≥s o disparo, voc√™ pode come√ßar a enviar mensagens. A chamada n√£o bloqueia seu script, e voc√™ pode continuar executando outros c√≥digos enquanto aguarda a conex√£o.Open()
OnOpen

Enviar
Objetivo: O m√©todo transmite dados para o servidor. Ele suporta diversos formatos de dados, incluindo strings e matrizes de bytes ( ). Tratamento de mensagens grandes: Para mensagens com mais de 32.767 bytes, o WebSocket as divide automaticamente em fragmentos, gerenciando a transmiss√£o de cada parte sequencialmente.Sendbyte[]

Fechar
Quando usar: Ap√≥s concluir toda a comunica√ß√£o, chame para encerrar a conex√£o. Desligamento gradual: Isso garante que a conex√£o seja encerrada corretamente, liberando recursos e sinalizando ao servidor que a comunica√ß√£o foi encerrada. Depois que um WebSocket √© fechado, ele n√£o pode ser reutilizado; voc√™ precisar√° criar uma nova inst√¢ncia para conex√µes futuras.Close()

üöß
Voc√™ n√£o pode reutilizar uma inst√¢ncia WebSocket fechada, voc√™ precisa criar e configurar uma nova.

JavaScript
Pit√£o
Java
Perl
PHP
Ferrugem
R√°pido
C
C#
Ir

const app_id = 'app_id'; // Replace with your app_id.
const socket = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`); // Create a new WebSocket connection using the app_id

// Event handler for when the WebSocket connection is opened
socket.onopen = function (e) {
  console.log('[open] Connection established'); // Log connection establishment
  console.log('Sending to server');

  const sendMessage = JSON.stringify({ ping: 1 }); // Create a ping message in JSON format
  socket.send(sendMessage); // Send the ping message to the server
};

// Event handler for when a message is received from the server
socket.onmessage = function (event) {
  console.log(`[message] Data received from server: ${event.data}`); // Log the message received from the server
};

// Event handler for when the WebSocket connection is closed
socket.onclose = function (event) {
  if (event.wasClean) {
    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`); // Log clean close with code and reason
  } else {
    console.log('[close] Connection died'); // Log an abrupt close
  }
};

// Event handler for when an error occurs with the WebSocket connection
socket.onerror = function (error) {
  console.log(`[error] ${error.message}`); // Log the error that occurred
};

/*
Instructions to run this code:

1. Ensure Node.js is installed on your machine. You can download it from https://nodejs.org/.
2. Install the `ws` WebSocket library by running:
   npm install ws
3. Save this code to a file, e.g., `websocket_client.js`.
4. Open a terminal and navigate to the directory where you saved the file.
5. Run the code using the following command:
   node websocket_client.js

Ensure that the `app_id` in the URL is replaced with your own if needed.
*/