Formato de solicitaÃ§Ã£o
Ao interagir com a API WebSocket da Deriv, todas as solicitaÃ§Ãµes devem ser enviadas como JSON em quadros de texto, com uma solicitaÃ§Ã£o por quadro.

Para ajudar vocÃª a gerenciar o fluxo de solicitaÃ§Ãµes e respostas, cada chamada de API segue uma estrutura padronizada. Essa estrutura auxilia no armazenamento em cache, na validaÃ§Ã£o e na sincronizaÃ§Ã£o de solicitaÃ§Ãµes e respostas, tornando sua conexÃ£o WebSocket mais fluida e eficiente.

Nome do mÃ©todo de chamada da API
Cada solicitaÃ§Ã£o deve incluir um campo, que serve como um identificador Ãºnico. Normalmente, ele Ã© definido como , mas Ã s vezes pode ser uma string.method name1

ðŸš§
O Ã© sempre necessÃ¡rio, pois define os dados especÃ­ficos que vocÃª receberÃ¡ do servidor WebSocket.method name

Campos obrigatÃ³rios
Cada solicitaÃ§Ã£o contÃ©m campos obrigatÃ³rios e tambÃ©m pode ter campos opcionais. Por exemplo, uma chamada retorna uma lista de paÃ­ses e seus cÃ³digos de duas letras, adequados para preencher um formulÃ¡rio de abertura de conta.Residence List

Exemplo de solicitaÃ§Ã£o de dados para lista de residÃªncias:

JSON

{
  "residence_list": 1, // Method Name
  "passthrough": {},   // Optional
  "req_id": 2          // Optional
}
O campo Ã© o nome do mÃ©todo e Ã© obrigatÃ³rio. Outros campos, como e, sÃ£o opcionais e dependem das suas necessidades especÃ­ficas.residence_listpassthroughreq_id

Campos opcionais
As chamadas de API geralmente incluem campos opcionais que vocÃª pode escolher usar ou ignorar:

passthrough: Este campo retorna quaisquer dados fornecidos no objeto de resposta. Ã‰ Ãºtil para manter o estado entre solicitaÃ§Ãµes e respostas.
req_id: Este campo permite que vocÃª marque solicitaÃ§Ãµes, facilitando o mapeamento delas para respostas.
ðŸš§
Para mais detalhes sobre campos opcionais para cada chamada de API, visite o API Explorer .

Dados de resposta
As respostas da API incluirÃ£o um campo com o nome que vocÃª usou na sua solicitaÃ§Ã£o. Este campo contÃ©m os dados reais.method name

Exemplo de resposta para lista de residÃªncias:

JSON

{
  "echo_req": {
    "req_id": 1,
    "residence_list": 1
  },
  "msg_type": "residence_list",
  "req_id": 1,
  "residence_list": [
    {
      "identity": {
        "services": {
          "idv": {
            "documents_supported": {},
            "has_visual_sample": 0,
            "is_country_supported": 0
          },
          "onfido": {
            "documents_supported": {
              "driving_licence": {
                "display_name": "Driving Licence"
              }
            },
            "is_country_supported": 0
          }
        }
      },
      "phone_idd": "35818",
      "text": "Aland Islands",
      "value": "ax"
    },
    {
      "identity": {
        "services": {
          "idv": {
            "documents_supported": {},
            "has_visual_sample": 0,
            "is_country_supported": 0
          },
          "onfido": {
            "documents_supported": {
              "driving_licence": {
                "display_name": "Driving Licence"
              },
              "national_identity_card": {
                "display_name": "National Identity Card"
              },
              "passport": {
                "display_name": "Passport"
              }
            },
            "is_country_supported": 1
          }
        }
      },
      "phone_idd": "355",
      "text": "Albania",
      "tin_format": [
        "^[A-Ta-t0-9]\\d{8}[A-Wa-w]$"
      ],
      "value": "al"
    }
  ]
}
O campo nesta resposta contÃ©m os dados solicitados. Para a resposta completa, consulte o API Explorer .residence_list

Campos de resposta
echo_req: Este campo retorna os dados exatos da solicitaÃ§Ã£o que foram enviados ao servidor, Ãºteis para verificaÃ§Ã£o e depuraÃ§Ã£o.
msg_type: Identifica o tipo de mensagem recebida do servidor, o que Ã© Ãºtil para gerenciar respostas no seu manipulador de eventos WebSocket.onmessage
req_id: Um campo opcional usado para validaÃ§Ã£o, sincronizaÃ§Ã£o ou armazenamento em cache.
Exemplo de JavaScript para lidar com respostas:

JavaScript

socket.onmessage = (event) => {
  const receivedMessage = JSON.parse(event.data);

  switch (receivedMessage.msg_type) {
    case "residence_list":
      console.log("The residence list is:", receivedMessage.residence_list);
      break;
    case "other_request_identifier":
      console.log("The response:", receivedMessage.some_other_request_identifier);
      break;
    default:
      console.log("Received message:", receivedMessage);
      break;
  }
};